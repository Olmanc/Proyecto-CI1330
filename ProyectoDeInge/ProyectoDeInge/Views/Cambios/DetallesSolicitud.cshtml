@model ProyectoDeInge.Models.CambiosViewModel

@{
    ViewBag.Title = "DetallesSolicitud";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Detalles de la Solicitud de Cambio</h2>

<div>
    <h4> <br />Solicitud de Cambio @Html.DisplayFor(model => model.solicitud.ID)</h4>
    @*botones de los modos*@
    <a class="btn btn-default" @*disabled="@(!Model.verificaPermisos.Contains("08") ? "disabled":null)"*@ onclick="habilitaModificar()">Modificar</a>
    <a class="btn btn-default" @*disabled="@(!Model.verificaPermisos.Contains("09") ? "disabled":null)"*@ onclick="confirmarEliminar('@(Model.solicitud.ID)')">Eliminar</a>
    <a class="btn btn-default" @*disabled="@(!Model.verificaPermisos.Contains("08") ? "disabled"*@ onclick="habilitarRevision()">Revisar Solicitud</a>
</div>
<hr /> @*raya*@
<div />

@using (Html.BeginForm())
{
    <div class="modificarSolicitud">
        @*Clase con los datos que puede modificar el solicitante*@

        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.solicitud.ID)
        @Html.HiddenFor(model => model.propuesto.ID)
        @Html.HiddenFor(model => model.propuesto.VERSION_ID)
        @Html.HiddenFor(model => model.propuesto.ESTADO)
        @Html.HiddenFor(model => model.actual.ESTADO)
        @Html.HiddenFor(model => model.actual.ID)
        @Html.HiddenFor(model => model.actual.NOMBRE)
        @Html.HiddenFor(model => model.actual.ESFUERZO)
        @Html.HiddenFor(model => model.actual.IMAGEN)
        @Html.HiddenFor(model => model.actual.DESCRIPCION)
        @Html.HiddenFor(model => model.actual.PRIORIDAD)
        @Html.HiddenFor(model => model.actual.OBSERVACIONES)
        @Html.HiddenFor(model => model.actual.MODULO)
        @Html.HiddenFor(model => model.actual.FECHAINCIO)
        @Html.HiddenFor(model => model.actual.FECHAFINAL)
        @Html.HiddenFor(model => model.actual.ENCARGADO)
        @Html.HiddenFor(model => model.actual.PRYCTOID)
        @Html.HiddenFor(model => model.actual.VERSION_ID)
        @Html.HiddenFor(model => model.actual.ESTADO_CAMBIOS)
        @Html.HiddenFor(model => model.actual.SPRINT)



        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayName("Autor: ")
            </dt>

            <dd>
                <div class="">
                    @Html.EditorFor(model => model.solicitante.nombreCompleto, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                    @Html.ValidationMessageFor(model => model.solicitante.nombreCompleto, "", new { @class = "text-danger" })
                </div>
            </dd>
            <br />
            <dt>
                @Html.DisplayName("Fecha:")
            </dt>

            <dd>
                <div class="solicitante">
                    @Html.EditorFor(model => model.solicitud.FECHA, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                    @Html.ValidationMessageFor(model => model.solicitud.FECHA, "", new { @class = "text-danger" })
                </div>
            </dd>
            <br />
            <dt>
                @Html.DisplayName("Descripcion:")
            </dt>

            <dd>
                <div class="solicitante">
                    @Html.EditorFor(model => model.solicitud.DESCRIPCION, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                    @Html.ValidationMessageFor(model => model.solicitud.DESCRIPCION, "", new { @class = "text-danger" })
                </div>
            </dd>
            <br />
            <dt>
                @Html.DisplayName("Justificación:")
            </dt>

            <dd>
                <div class="solicitante">
                    @Html.EditorFor(model => model.solicitud.JUSTIFICACION, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                    @Html.ValidationMessageFor(model => model.solicitud.JUSTIFICACION, "", new { @class = "text-danger" })
                </div>
            </dd>
        </dl>


        <hr />
        <br />
        <h4>Comparación de Datos</h4>
        @*Tabla de REQ Propuesto REQ Actual*@
        <table class="table">
            <tr>
                <th></th>
                <th>
                    <div style="solid #fbb; text-align: center;">
                        Requerimiento Actual
                    </div>
                </th>
                <th>
                    <div style="solid #fbb; text-align: center;">
                        Requerimiento Propuesto
                    </div>
                </th>
            </tr>
            @*ID de los requerimientos*@
            <tr>
                <th>
                    ID
                </th>
                @*Si son iguales no se colorea porque no hubo cambio*@
                @if (Model.propuesto.ID.Equals(Model.vigente.ID))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.ID, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="id">
                                    @Html.EditorFor(model => model.propuesto.ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.ID, "", new { @class = "text-danger" })
                                </div>
                            </th>
                } @*Si no son iguales colorear color lightgrey para ver que hubo un cambio*@
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.ID, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="id">
                                    @Html.EditorFor(model => model.propuesto.ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.ID, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Nombre de los requerimientos*@
            <tr>
                <th>
                    Nombre
                </th>
                @*Si son iguales no se colorea porque no hubo cambio*@
                @if (Model.propuesto.NOMBRE.Equals(Model.vigente.NOMBRE))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.NOMBRE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.NOMBRE, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="nombre">
                                    @Html.EditorFor(model => model.propuesto.NOMBRE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.NOMBRE, "", new { @class = "text-danger" })
                                </div>
                            </th>
                } @*Si no son iguales colorear color lightgrey para ver que hubo un cambio*@
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.NOMBRE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.NOMBRE, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="nombre">
                                    @Html.EditorFor(model => model.propuesto.NOMBRE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.NOMBRE, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Esfuerzo de los requerimientos*@
            <tr>
                <th>
                    Esfuerzo
                </th>
                @if (Model.propuesto.ESFUERZO.Equals(Model.vigente.ESFUERZO))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.ESFUERZO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.ESFUERZO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="esfuerzo">
                                    @Html.EditorFor(model => model.propuesto.ESFUERZO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.ESFUERZO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.ESFUERZO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.ESFUERZO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="esfuerzo">
                                    @Html.EditorFor(model => model.propuesto.ESFUERZO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.ESFUERZO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Descripción de los requerimientos*@
            <tr>
                <th>
                    Descripción
                </th>
                @if (Model.propuesto.DESCRIPCION.Equals(Model.vigente.DESCRIPCION))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.DESCRIPCION, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.DESCRIPCION, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="descripcion">
                                    @Html.EditorFor(model => model.propuesto.DESCRIPCION, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.DESCRIPCION, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.DESCRIPCION, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.DESCRIPCION, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="descripcion">
                                    @Html.EditorFor(model => model.propuesto.DESCRIPCION, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.DESCRIPCION, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Prioridad de los requerimientos*@
            <tr>
                <th>
                    Prioridad
                </th>
                @if (Model.propuesto.PRIORIDAD.Equals(Model.vigente.PRIORIDAD))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.PRIORIDAD, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.PRIORIDAD, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="prioridad">
                                    @Html.EditorFor(model => model.propuesto.PRIORIDAD, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.PRIORIDAD, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.PRIORIDAD, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.PRIORIDAD, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="prioridad">
                                    @Html.EditorFor(model => model.propuesto.PRIORIDAD, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.PRIORIDAD, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Observaciones de los requerimientos*@
            <tr>
                <th>
                    Observaciones
                </th>
                @*Si son iguales no se colorea porque no hubo cambio*@
                @if (Model.propuesto.OBSERVACIONES.Equals(Model.vigente.OBSERVACIONES))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.OBSERVACIONES, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.OBSERVACIONES, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="observaciones">
                                    @Html.EditorFor(model => model.propuesto.OBSERVACIONES, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.OBSERVACIONES, "", new { @class = "text-danger" })
                                </div>
                                @Html.ValidationMessageFor(model => model.propuesto.OBSERVACIONES, "", new { @class = "text-danger" })
                            </th>
                } @*Si no son iguales colorear color lightgrey para ver que hubo un cambio*@
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.OBSERVACIONES, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.OBSERVACIONES, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="observaciones">
                                    @Html.EditorFor(model => model.propuesto.OBSERVACIONES, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.OBSERVACIONES, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Módulo de los requerimientos*@
            <tr>
                <th>
                    Módulo
                </th>
                @if (Model.propuesto.MODULO.Equals(Model.vigente.MODULO))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.MODULO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.MODULO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="modulo">
                                    @Html.EditorFor(model => model.propuesto.MODULO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.MODULO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.MODULO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.MODULO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="modulo">
                                    @Html.EditorFor(model => model.propuesto.MODULO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.MODULO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Fecha inicio de los requerimientos*@
            <tr>
                <th>
                    Fecha de inicio
                </th>
                @if (Model.propuesto.FECHAINCIO.Equals(Model.vigente.FECHAINCIO))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.FECHAINCIO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.FECHAINCIO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="fechainicio">
                                    @Html.EditorFor(model => model.propuesto.FECHAINCIO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.FECHAINCIO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {

                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.FECHAINCIO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.FECHAINCIO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="fechainicio">
                                    @Html.EditorFor(model => model.propuesto.FECHAINCIO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.FECHAINCIO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Fecha finalización de los requerimientos*@
            <tr>
                <th>
                    Fecha finalización
                </th>
                @if (Model.propuesto.FECHAFINAL.Equals(Model.vigente.FECHAFINAL))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.FECHAFINAL, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.FECHAFINAL, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="fechafin">
                                    @Html.EditorFor(model => model.propuesto.FECHAFINAL, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.FECHAFINAL, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.FECHAFINAL, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.FECHAFINAL, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="fechafin">
                                    @Html.EditorFor(model => model.propuesto.FECHAFINAL, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.FECHAFINAL, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Encargado de los requerimientos*@
            <tr>
                <th>
                    Encargado
                </th>
                @Html.HiddenFor(model => model.propuesto.ENCARGADO)
                @if (Model.propuesto.ENCARGADO.Equals(Model.vigente.USUARIOS.NOMBRE))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vigente.ENCARGADO, (IEnumerable<SelectListItem>)ViewData["ENCARGADO"], new { @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.vigente.USUARIOS.NOMBRE, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="encargado">
                                    @Html.DropDownListFor(model => model.propuesto.ENCARGADO, (IEnumerable<SelectListItem>)ViewData["ENCARGADO"], new { @class = "form-control", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.propuesto.ENCARGADO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vigente.USUARIOS.NOMBRE, (IEnumerable<SelectListItem>)ViewData["ENCARGADO"], new { @class = "form-control", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.vigente.ENCARGADO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="encargado">
                                    @Html.DropDownListFor(model => model.propuesto.ENCARGADO, (IEnumerable<SelectListItem>)ViewData["ENCARGADO"], new { @class = "form-control", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(model => model.propuesto.USUARIOS.NOMBRE, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Proyecto al que pertenecen los requerimientos*@
            <tr>
                <th>
                    Proyecto
                </th>
                @if (Model.propuesto.PRYCTOID.Equals(Model.vigente.PRYCTOID))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.PROYECTO.NOMBRE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.PROYECTO.NOMBRE, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="proyecto">
                                    @Html.EditorFor(model => model.propuesto.PROYECTO.NOMBRE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.PROYECTO.NOMBRE, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.PRYCTOID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.PRYCTOID, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="proyecto">
                                    @Html.EditorFor(model => model.propuesto.PROYECTO.NOMBRE, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.PROYECTO.NOMBRE, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*version de los requerimientos*@
            <tr>
                <th>
                    Versión
                </th>
                @if (Model.propuesto.VERSION_ID.Equals(Model.vigente.VERSION_ID))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.VERSION_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.VERSION_ID, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="version">
                                    @Html.EditorFor(model => model.propuesto.VERSION_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.VERSION_ID, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.VERSION_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.VERSION_ID, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="version">
                                    @Html.EditorFor(model => model.propuesto.VERSION_ID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.VERSION_ID, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Estado de los requerimientos*@
            <tr>
                <th>
                    Estado
                </th>
                @if (Model.propuesto.ESTADO.Equals(Model.vigente.ESTADO))
                {
                    <th>
                        <div class="col-md-10">
                            @*@Html.EditorFor(model => model.vigente.ESTADO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                @Html.ValidationMessageFor(model => model.vigente.ESTADO, "", new { @class = "text-danger" })*@
                            @*</div>*@

                            @Html.DropDownListFor(model => model.vigente.ESTADO, new SelectList(
                                        new List<Object>{
                                            new { value = "Pendiente" , text = "Pendiente"  },
                                            new { value = "Asignado" , text = "Asignado" },
                                            new { value = "Ejecución" , text = "Ejecución" },
                                            new { value = "Finalizado" , text = "Finalizado" },
                                            new { value = "Cerrado" , text = "Cerrado"}
                                        },
                                     "value", "text", 2), htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.vigente.ESTADO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="estado">
                                    @*@Html.EditorFor(model => model.propuesto.ESTADO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })*@
                                    @Html.DropDownListFor(model => model.propuesto.ESTADO, new SelectList(
                                        new List<Object>{
                                            new { value = "Pendiente" , text = "Pendiente"  },
                                            new { value = "Asignado" , text = "Asignado" },
                                            new { value = "Ejecución" , text = "Ejecución" },
                                            new { value = "Finalizado" , text = "Finalizado" },
                                            new { value = "Cerrado" , text = "Cerrado"}
                                        },
                                     "value", "text", 2), htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.propuesto.ESTADO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @*@Html.EditorFor(model => model.vigente.ESTADO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })*@
                            @Html.DropDownListFor(model => model.vigente.ESTADO, new SelectList(
                                        new List<Object>{
                                            new { value = "Pendiente" , text = "Pendiente"  },
                                            new { value = "Asignado" , text = "Asignado" },
                                            new { value = "Ejecución" , text = "Ejecución" },
                                            new { value = "Finalizado" , text = "Finalizado" },
                                            new { value = "Cerrado" , text = "Cerrado"}
                                        },
                                     "value", "text", 2), htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.vigente.ESTADO, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="estado">
                                    @*@Html.EditorFor(model => model.propuesto.ESTADO, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })*@
                                    @Html.DropDownListFor(model => model.propuesto.ESTADO, new SelectList(
                                        new List<Object>{
                                            new { value = "Pendiente" , text = "Pendiente"  },
                                            new { value = "Asignado" , text = "Asignado" },
                                            new { value = "Ejecución" , text = "Ejecución" },
                                            new { value = "Finalizado" , text = "Finalizado" },
                                            new { value = "Cerrado" , text = "Cerrado"}
                                        },
                                     "value", "text", 2), htmlAttributes: new { @class = "form-control", @disabled = "disabled" })
                                    @Html.ValidationMessageFor(model => model.propuesto.ESTADO, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
            @*Sprint de los requerimientos*@
            <tr>
                <th>
                    Sprint
                </th>
                @if (Model.propuesto.SPRINT.Equals(Model.vigente.SPRINT))
                {
                    <th>
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.SPRINT, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.SPRINT, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th>
                                <div class="sprint">
                                    @Html.EditorFor(model => model.propuesto.SPRINT, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.SPRINT, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
                else
                {
                    <th bgcolor="lightgrey">
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vigente.SPRINT, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                            @Html.ValidationMessageFor(model => model.vigente.SPRINT, "", new { @class = "text-danger" })
                        </div>
                    </th>
                            <th bgcolor="lightgrey">
                                <div class="sprint">
                                    @Html.EditorFor(model => model.propuesto.SPRINT, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                                    @Html.ValidationMessageFor(model => model.propuesto.SPRINT, "", new { @class = "text-danger" })
                                </div>
                            </th>
                }
            </tr>
        </table>
    </div> @*fin de los campos que puede modificar el solicitante*@


    <div class="revisarSolicitud" style="display:none">
        <hr />
        <br /> @*cambio de linea*@
        <h4>Datos de la Revisión</h4>
        <hr />

        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayName("Estado de Revisión: ")
            </dt>

            <dd>
                <div class="col-md-10">
                    @*@Html.EditorFor(model => model.propuesto.ESTADO_CAMBIOS, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })*@
                    @Html.DropDownListFor(model => model.propuesto.ESTADO_CAMBIOS, new SelectList(
                                        new List<Object>{
                                            new { value = "Aprobado" , text = "Aprobado"  },
                                            new { value = "Rechazado" , text = "Rechazado" },
                                            new { value = "Pendiente" , text = "Pendiente" },
                                            new { value = "En revisión" , text = "En revisión" }
                                        },
                                     "value", "text", 2), htmlAttributes: new { @class = "form-control"/*, @disabled = "disabled"*/ })
                    @Html.ValidationMessageFor(model => model.propuesto.ESTADO_CAMBIOS, "", new { @class = "text-danger" })
                </div>
            </dd>

            <p>
            <dt>
                @Html.DisplayName("Realizada por: ")
            </dt>

            <dd>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.solicitud.nombreCompleto, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", disabled = "disabled"} })
                    @Html.ValidationMessageFor(model => model.solicitud.nombreCompleto, "", new { @class = "text-danger" })
                </div>
            </dd>
            </p>

            <dt>
                @Html.DisplayName("Fecha en que se realizó: ")
            </dt>

            <dd>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.solicitud.FECHA_REV, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                    @Html.ValidationMessageFor(model => model.solicitud.FECHA_REV, "", new { @class = "text-danger" })
                </div>
            </dd>

            <p>
            <dt>
                @Html.DisplayName("Justificación: ")
            </dt>

            <dd>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.solicitud.JUST_REV, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly"/*, disabled = "disabled"*/ } })
                    @Html.ValidationMessageFor(model => model.solicitud.JUST_REV, "", new { @class = "text-danger" })
                </div>
            </dd>
            </p>
        </dl>
    </div>


    <div class="botonesModificar" style="display:none">
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" id="btnSubmit" value="Aceptar" class="btn btn-default" />
                <a class="btn btn-default" onclick="window.location = '@Url.Action("DetallesSolicitud", new { id = Model.solicitud.ID })';">Cancelar</a>
            </div>
        </div>
    </div>

    <div>
        @*link para volver*@
        <p>
            @*Html.ActionLink("Edit", "Edit", new { id = Model.ID })*@
            @*@Html.ActionLink("Volver", "Index")*@
        </p>
    </div>
}

<script>

    function habilitaModificar() {
        //$('.modificarSolicitud').find('input, textarea, select').attr('readonly', false);
        //$('.id').find('input, textarea, select').attr('readonly', false);
        $('.solicitante').find('input, textarea, select').attr('readonly', false);
        $('.nombre').find('input, textarea, select').attr('readonly', false);
        $('.esfuerzo').find('input, textarea, select').attr('readonly', false);
        $('.descripcion').find('input, textarea, select').attr('readonly', false);
        $('.prioridad').find('input, textarea, select').attr('readonly', false);
        $('.observaciones').find('input, textarea, select').attr('readonly', false);
        $('.modulo').find('input, textarea, select').attr('readonly', false);
        $('.fechainicio').find('input, textarea, select').attr('readonly', false);
        $('.fechafin').find('input, textarea, select').attr('readonly', false);
        $('.encargado').find('input, textarea, select').attr('readonly', false);
        //$('.proyecto').find('input, textarea, select').attr('readonly', false);
        //$('.version').find('input, textarea, select').attr('readonly', false);
        $('.estado').find('input, textarea, select').attr('disabled', false);
        $('.sprint').find('input, textarea, select').attr('readonly', false);
        $('.revisarSolicitud').find('input, textarea, select').attr('readonly', true);
        $('.modos').children().attr('disabled', true);
        $('.botonesModificar').show();
    }

    function habilitarRevision() {
        //$('.modificarSolicitud').find('input, textarea, select').attr('readonly', false);
        //$('.id').find('input, textarea, select').attr('readonly', false);
        $('.nombre').find('input, textarea, select').attr('readonly', false);
        $('.esfuerzo').find('input, textarea, select').attr('readonly', false);
        $('.descripcion').find('input, textarea, select').attr('readonly', false);
        $('.prioridad').find('input, textarea, select').attr('readonly', false);
        $('.observaciones').find('input, textarea, select').attr('readonly', false);
        $('.modulo').find('input, textarea, select').attr('readonly', false);
        $('.fechainicio').find('input, textarea, select').attr('readonly', false);
        $('.fechafin').find('input, textarea, select').attr('readonly', false);
        $('.encargado').find('input, textarea, select').attr('readonly', false);
        //$('.proyecto').find('input, textarea, select').attr('readonly', false);
        //$('.version').find('input, textarea, select').attr('readonly', false);
        $('.estado').find('input, textarea, select').attr('disabled', false);
        $('.sprint').find('input, textarea, select').attr('readonly', false);
        $('.revisarSolicitud').find('input, textarea, select').attr('readonly', false);
        $('.modos').children().attr('disabled', true);
        $('.botonesModificar').show();
        $('.revisarSolicitud').show();
    }


    @*///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ELIMINAR PROYECTO*@

    function confirmarEliminar(id) {

        var respuesta = confirm('Confirma que desea eliminar esta solicitud de requerimiento del sistema?');

        if (respuesta == true) {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("eliminarSolicitud")',
                data: 'id=' + id,
                success: function (result) {
                    if (result.success) {
                        alert('Solicitud eliminada con éxito.');
                        var url = '@Url.Action("IndexSolicitudes", "CAMBIOS")';
                        window.location.href = url;
                    }
                    else {
                        alert('La solicitud no se puede eliminar.');
                        var url = '@Url.Action("IndexSolicitudes", "CAMBIOS")';
                        window.location.href = url;
                    }
                },
            });
        }
    }

</script>
